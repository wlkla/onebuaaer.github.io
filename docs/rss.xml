<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>我在人世间踽踽独行</title><link>https://wlkla.github.io/onebuaaer.github.io</link><description>世界并不美好，但我暂时不想离开</description><copyright>我在人世间踽踽独行</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://telegraph-image-6b4.pages.dev/file/3a89e862ad5a60a260608.jpg</url><title>avatar</title><link>https://wlkla.github.io/onebuaaer.github.io</link></image><lastBuildDate>Mon, 02 Sep 2024 14:26:54 +0000</lastBuildDate><managingEditor>我在人世间踽踽独行</managingEditor><ttl>60</ttl><webMaster>我在人世间踽踽独行</webMaster><item><title>数据的表示与运算</title><link>https://wlkla.github.io/onebuaaer.github.io/post/shu-ju-de-biao-shi-yu-yun-suan.html</link><description># 第二章：数据的表示与运算&#13;
&#13;
## 数制与编码&#13;
&#13;
### 进位计数制及其相互转换&#13;
&#13;
1. 在进位计数法中，每个数位所用到的不同数码的个数称为`基数`。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/shu-ju-de-biao-shi-yu-yun-suan.html</guid><pubDate>Mon, 02 Sep 2024 14:26:31 +0000</pubDate></item><item><title>计算机系统概述</title><link>https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-xi-tong-gai-shu.html</link><description># 第一章：计算机系统概述&#13;
&#13;
## 计算机发展历程&#13;
&#13;
### 计算机硬件的发展&#13;
&#13;
1. 计算机的四代发展：&#13;
   电子管时代 $\longrightarrow$ 晶体管时代 $\longrightarrow$ 中小规模集成电路时代 $\longrightarrow$ 超大规模集成电路时代&#13;
&#13;
## 计算机系统层次结构&#13;
&#13;
### 计算机系统的组成&#13;
&#13;
1. 计算机系统包含硬件系统与软件系统。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-xi-tong-gai-shu.html</guid><pubDate>Mon, 02 Sep 2024 14:25:19 +0000</pubDate></item><item><title>应用层</title><link>https://wlkla.github.io/onebuaaer.github.io/post/ying-yong-ceng.html</link><description># 应用层&#13;
&#13;
## 网络应用模型&#13;
&#13;
### 客户/服务器模型&#13;
&#13;
1. 在客户/服务器(C/S)模型中，有一个总是打开的主机称为服务器，它服务于许多来自其他称为客户机的主机请求&#13;
2. 特点：&#13;
   - 网络中各计算机地位不平等，服务器可通过对用户权限的限制来达到管理客户机的目的。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/ying-yong-ceng.html</guid><pubDate>Mon, 02 Sep 2024 14:24:14 +0000</pubDate></item><item><title>传输层</title><link>https://wlkla.github.io/onebuaaer.github.io/post/chuan-shu-ceng.html</link><description># 传输层&#13;
&#13;
## 传输层提供的服务&#13;
&#13;
### 传输层的功能&#13;
&#13;
1. 传输层为运行在不同主机上的进程之间提供逻辑通信&#13;
2. 从网络层来说，通信双方是两台主机；从传输层来说，通信双方是主机中的进程&#13;
3. 复用和分用：&#13;
   - 复用：发送方不同的应用进程都可以使用同一传输层协议传送数据&#13;
   - 分用：接收方的传输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程&#13;
4. 差错检测：传输层要对收到的报文进行差错检测。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/chuan-shu-ceng.html</guid><pubDate>Mon, 02 Sep 2024 14:02:19 +0000</pubDate></item><item><title>网络层</title><link>https://wlkla.github.io/onebuaaer.github.io/post/wang-luo-ceng.html</link><description># 网络层&#13;
&#13;
## 网络层的功能&#13;
&#13;
1. 网络层提供主机到主机的通信服务，主要任务是将分组从源主机到经过多个网络和多段链路传输到目的主机&#13;
&#13;
### 异构网络互连&#13;
&#13;
1. 网络互连将两个以上的计算机网络，通过一定的方法用一些中继系统相互连接起来，以构成更大的网络系统&#13;
2. 根据所在的层次，中继系统分为以下几种：&#13;
   - 物理层中继系统：转发器，集线器&#13;
   - 数据链路层中继系统：网桥或交换机&#13;
   - 网络层中继系统：路由器&#13;
   - 网络层以上的中继系统：网关&#13;
3. TCP/IP在网络互连上采用的做法是在网络层采用标准化协议，但相连的网络可以是异构的&#13;
4. IP网络：使用IP协议的虚拟互联网络&#13;
&#13;
### 路由与转发&#13;
&#13;
1. 路由器主要完成两个功能：路由选择和分组转发&#13;
   - 路由选择：根据路由协议构造路由表，同时经常或定期地与相邻路由器交换信息，获取网络最新拓扑，动态更新维护路由表，以决定分组到达目的节点的最优路径&#13;
   - 分组转发：路由器根据转发表将分组从合适的端口转发出去&#13;
&#13;
### 网络层提供的两种服务&#13;
&#13;
1. 分组交换网提供的服务：&#13;
   - 面向连接的虚电路服务&#13;
   - 无连接的数据报服务&#13;
2. 虚电路&#13;
   - 当两台计算机进行通信时，应当先建立网络层的连接，即建立一条逻辑上的虚电路(VC)，连接一旦建立，就固定了虚电路对应的物理路径&#13;
   - 通信过程：虚电路建立$\rightarrow$数据传输$\rightarrow$虚电路释放&#13;
   - 每次建立虚电路时，将一个未用过的虚电路号VCID分配给该虚电路，以区别于本系统中的其他虚电路&#13;
   - 分组的首部仅在连接建立时使用完整的目的地址，之后每个分组的首部只需携带虚电路的编号即可&#13;
   - 在虚电路网络中的每个节点上都维持一张虚电路表，表中每项记录一个打开的虚电路信息，包括在接受链路和发送链路上的虚电路号、前一节点和下一节点的标识&#13;
   - 虚电路服务的特点：&#13;
     - 虚电路通信链路的建立和拆除需要时间开销，不利于交互式应用和少量的短分组情况&#13;
     - 虚电路的路由选择体现在连接建立阶段&#13;
     - 虚电路提供了可靠的通信功能，能保证每个分组正确有序到达。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/wang-luo-ceng.html</guid><pubDate>Mon, 02 Sep 2024 13:57:40 +0000</pubDate></item><item><title>数据链路层</title><link>https://wlkla.github.io/onebuaaer.github.io/post/shu-ju-lian-lu-ceng.html</link><description># 数据链路层&#13;
&#13;
## 数据链路层的功能&#13;
&#13;
### 概念&#13;
&#13;
1. 数据链路层的主要任务是实现帧在一段链路上或一个网络中进行传输&#13;
2. 数据链路层使用的信道：&#13;
   - 点对点信道：使用一对一通信方式&#13;
   - 广播信道：信道上连接的主机很多，使用一对多的广播通信方式&#13;
3. 链路/物理链路：从一个节点到相邻节点的一段物理线路&#13;
4. 数据链路/逻辑链路：当在一条链路上传送数据时，除了需要链路本身，还需要一些必要的通信协议来控制这些数据的传输，把实现这些协议的硬件和软件加到链路上，就构成了数据链路&#13;
5. 帧：数据链路层对等实体之间进行逻辑通信的协议数据单元&#13;
&#13;
### 为网络层提供服务&#13;
&#13;
1. 无确认的无连接服务：&#13;
&#13;
   - 源主机发送帧时不需要先建立链路连接，目的主机收到帧时不需要发回确认&#13;
   - 适用于误码率较低的信道&#13;
&#13;
2. 有确认的无连接服务：&#13;
&#13;
   - 源主机发送帧时不需要先建立链路连接，目的主机收到帧时需要发回确认&#13;
   - 适用于误码率较高的信道&#13;
&#13;
3. 有确认的面向连接服务：&#13;
&#13;
   - 帧传输过程分为三个阶段，目的主机对收到的每一个帧都要返回确认&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(建立链路)--&gt;B(传输帧)--&gt;C(释放链路)&#13;
   ```&#13;
&#13;
   - 适用于可靠性要求较高的场合&#13;
&#13;
### 链路管理&#13;
&#13;
1. 链路管理：数据链路层连接的建立、维持和释放过程&#13;
2. 主要用于面向连接服务&#13;
&#13;
### 组装成帧与透明传输&#13;
&#13;
1. 封装成帧：指在一段数据的前后分别添加首部和尾部，构成帧，帧是数据链路层的数据传送单元&#13;
2. 帧长：帧的数据部分长度加上首部和尾部的长度&#13;
3. 首部和尾部中含有很多控制信息，一个作用就是确定真的界限，即帧定界&#13;
4. 每个链路层协议都规定了帧的数据部分的长度上限，即最大传送单元&#13;
5. 透明传输：不论传送什么数据，都能无差错地在数据链路上传输&#13;
&#13;
### 流量控制&#13;
&#13;
1. 限制发送方地发送速率，使之不超过接收方的接受能力&#13;
2. 在OSI体系结构中，数据链路层具有流量控制的功能，控制的是相邻节点之间的数据链路上地流量&#13;
3. 在TCP/IP体系结构中，流量控制功能被移到传输层，控制的是源端到目的端之间的流量&#13;
&#13;
### 差错控制&#13;
&#13;
1. 位错：帧中某些位出现差错，通常采用循环冗余检查来发现位错&#13;
2. 帧错：帧丢失、帧重复或帧失序等错误，都属于传输差错&#13;
&#13;
### 错题&#13;
&#13;
1. 数据链路层协议的功能不包括(  )&#13;
&#13;
   A. 定义数据格式&#13;
&#13;
   B. 提供节点之间的可靠传输&#13;
&#13;
   C. 控制对物理传输介质的访问&#13;
&#13;
   D. 为终端节点隐蔽物理传输的细节&#13;
&#13;
2. 为了避免传输过程中帧的丢失，数据链路层采用的方法是(  )&#13;
&#13;
   A. 帧编号机制&#13;
&#13;
   B. 循环冗余验证码&#13;
&#13;
   C. 海明码&#13;
&#13;
   D. 计时器超时重发&#13;
&#13;
## 组帧&#13;
&#13;
### 字符计数法&#13;
&#13;
1. 在帧首部使用一个计数字段来记录该帧所含的字节数(包含计数字段自身所占用的一个字节)&#13;
&#13;
   ![flower](https://telegraph-image-6b4.pages.dev/file/648a9ee0be37e2639174f.png)&#13;
&#13;
2. 缺点：若计数字段出错，则所有帧都将出错，收发双方失去同步&#13;
&#13;
### 字节填充法&#13;
&#13;
1. 使用特定字节来定界一帧的开始与结束&#13;
2. 控制字符SOH放在帧的最前面，表示帧的开始，控制字符EOT表示帧的结束&#13;
3. 为了使信息位中出现的特殊字符不被误判为帧的首位定界符，可在特殊字符之前填充一个转义字符ESC加以区分&#13;
&#13;
![flower](https://telegraph-image-6b4.pages.dev/file/cd7dc38ac0e1c7a14774d.png)&#13;
&#13;
### 零比特填充法&#13;
&#13;
1. 允许数据帧包含任意个数的比特，它使用一个特定的比特串0111110来表示一个帧的开始和结束&#13;
2. 为了不使数据字段中出现的比特流01111110被误判为帧的守卫表示，发送方先扫描整个数据字段，每遇到5个连续的1便在后面插入一个0；接收方每收到5个连续的1，就自动删除后面紧跟的0&#13;
&#13;
### 违规编码法&#13;
&#13;
1. 曼彻斯特编码方法将数据比特1编码成“高-低”电平对，将数据比特0编码成“低-高”电平对，而“高高”电平对和“低低”电平对在数据比特中是违规的，因此可采用这些违规编码来界定帧的起始和终止&#13;
2. 只适用于采用冗余编码的特殊编码环境&#13;
&#13;
## 差错控制&#13;
&#13;
利用编码技术进行差错控制，主要有两类：&#13;
&#13;
- 自动重传请求ARQ：当接收方检测到差错时，就设法通知发送方重发，直到收到正常的数据&#13;
- 前向纠错FEC：接收方不但能发现差错，还能确定错误的位置并加以纠正&#13;
&#13;
### 检错编码&#13;
&#13;
1. 奇偶校验码&#13;
&#13;
   - 奇校验码：附加一个检验位后，码长为n的码字中1的个数为奇数&#13;
   - 偶校验码：附加一个校验位后，码长为n的码字中1的个数为偶数&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(1001101)&#13;
   	A--&gt;|奇校验码|B(10011011)&#13;
   	A--&gt;|偶校验码|C(10011010)&#13;
   ```&#13;
&#13;
2. 循环冗余码&#13;
&#13;
   - CRC检错的基本思想&#13;
     1. 收发双方约定生成多项式G(x)&#13;
     2. 发送方基于待发送数据和G(x)，计算出冗余码，将冗余码附加到数据后面一起发送&#13;
     3. 接收方收到数据和冗余码后，通过G(x)来计算收到的数据和冗余码是否产生差错&#13;
   - CRC检错的步骤&#13;
     1. 假设一个带传送m位的数据，CRC运算产生一个r位的冗余码，称为帧检验序列FCS&#13;
     2. 附加到m位数据后，形成长度为m+r的帧用于发送&#13;
     3. 接收方用相同的多项式去除收到的帧，若无余数，则认为无差错&#13;
&#13;
### 纠错编码&#13;
&#13;
以数据1100为例&#13;
&#13;
1. 确定海明码的位数&#13;
&#13;
   - 设n为有效信息的位数，k为检验位的位数，则信息位n和检验位k应满足n+k≤2^k^-1&#13;
   - 4+k≤2^k^-1$\Rightarrow$k≥3&#13;
&#13;
2. 确定检验位的分布&#13;
&#13;
   - 规定第i个检验位在海明位号为2^i-1^的位置上，其余各位为信息位&#13;
   - 三个检验位的位号分别为2^0^、2^1^、2^2^$\Rightarrow$110x~4~0x~2~x~1~&#13;
&#13;
3. 分组以形成检验关系&#13;
&#13;
   - 每个数据位用多个检验位进行检验，但要满足条件：被检验数据位的海明位号等于检验该数据位的各检验位海明位号之和&#13;
&#13;
   - | 111  | 110  | 101  | 100(1**) | 011  | 010(\*1\*) | 001(**1) |&#13;
     | :--: | :--: | :--: | :------: | :--: | :--------: | :------: |&#13;
     |  1   |  1   |  0   |   x~4~   |  0   |    x~2~    |   x~1~   |&#13;
&#13;
     根据检验位位号对应的通配符：&#13;
&#13;
     - x~4~负责检验111、110、101、100号&#13;
     - x~2~负责检验111、110、011、010号&#13;
     - x~1~负责检验111、101、011、001号&#13;
&#13;
4. 检验位取值&#13;
&#13;
   - 第i个检验位的值应为第i组所有位求异或&#13;
   - 若采用偶校验：x~4~=1$\oplus$1$\oplus$0=0;x~2~=1$\oplus$1$\oplus$0=0;x~1~=1$\oplus$0$\oplus$0=1，因此最终要发送的数据为1100001&#13;
&#13;
5. 海明码的检验原理&#13;
&#13;
   - 每个检验组分别利用检验位和参与形成该检验位的信息位进行奇偶检验检查，将结果转置，对应的编号即为错误位的位号&#13;
&#13;
   - 假设接收方收到的数据为：1110001，则&#13;
&#13;
     - x~4~：0$\oplus$1$\oplus$1$\oplus$1=1&#13;
     - x~2~：0$\oplus$0$\oplus$1$\oplus$1=0&#13;
     - x~1~：1$\oplus$0$\oplus$1$\oplus$1=1&#13;
&#13;
     则发生错误的位号为x~4~x~2~x~1~：101=5&#13;
&#13;
## 流量控制与可靠传输机制&#13;
&#13;
### 流量控制与滑动窗口机制&#13;
&#13;
1. 流量控制：由接收方控制发送方的发送速率，使接收方有足够的缓存空间来接受每个帧&#13;
2. 常见的流量控制方法有两种：&#13;
   - 停止-等待协议&#13;
   - 滑动窗口协议&#13;
3. 数据链路层和传输层都有流量控制功能，且都用到了滑动窗口协议，区别是&#13;
   - 数据链路层控制的是相邻节点之间的流量，而传输层控制的是端到端的流量&#13;
   - 数据链路层的控制手段是接收方收不下就不返回确认。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/shu-ju-lian-lu-ceng.html</guid><pubDate>Mon, 02 Sep 2024 13:53:49 +0000</pubDate></item><item><title>物理层</title><link>https://wlkla.github.io/onebuaaer.github.io/post/wu-li-ceng.html</link><description># 物理层&#13;
&#13;
## 通信基础&#13;
&#13;
### 基本概念&#13;
&#13;
1. 数据、信号与码元&#13;
&#13;
   - 数据：传送信息的实体，分为模拟数据与数字数据&#13;
   - 信号：数据在传输过程中的存在形式，分为模拟信号与数字信号&#13;
   - 码元：在通信系统中，固定时长的代表不同离散数值的基本波形。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/wu-li-ceng.html</guid><pubDate>Mon, 02 Sep 2024 13:49:40 +0000</pubDate></item><item><title>计算机网络体系结构</title><link>https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-wang-luo-ti-xi-jie-gou.html</link><description># 计算机网络体系结构&#13;
&#13;
## 计算机网络概述&#13;
&#13;
### 计算机网络的概念&#13;
&#13;
1. 计算机网络由若干结点和连接这些结点的链路组成&#13;
2. 网络之间通过路由器互连，构成一个覆盖范围更广的计算机网络&#13;
&#13;
### 计算机网络的组成&#13;
&#13;
```mermaid&#13;
graph TB&#13;
	A(计算机网络组成的分类)--&gt;B(组成部分)&#13;
	A--&gt;C(工作方式)&#13;
	A--&gt;D(功能组成)&#13;
	B--&gt;E(硬件)&#13;
	B--&gt;F(软件)&#13;
	B--&gt;G(协议)&#13;
	C--&gt;H(边缘部分)&#13;
	C--&gt;I(核心部分)&#13;
	D--&gt;J(通信子网)&#13;
	D--&gt;K(资源子网)&#13;
```&#13;
&#13;
### 计算机网络的功能&#13;
&#13;
1. 数据通信：最基本最重要的功能&#13;
2. 资源共享&#13;
3. 分布式处理：当计算机网络中某个计算机负载过重时，可将其处理的某个复杂任务分配给网络中的其他计算机系统，从而提高整个系统的利用率&#13;
4. 提高可靠性：计算机网络中的各台计算机可以通过网络互为替代机&#13;
5. 负载均衡：将工作任务均衡地分配给计算机网络中的各台计算机&#13;
&#13;
### 电路交换、报文交换与分组交换&#13;
&#13;
1. 电路交换&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(连接建立)--&gt;B(数据传输)--&gt;C(连接释放)&#13;
   ```&#13;
&#13;
   - 优点：&#13;
     - 通信时延小：线路专用，数据直达&#13;
     - 有序传输：双方通信按发送顺序传送数据，不存在失序问题&#13;
     - 没有冲突：不同的通信双方拥有不同的信道&#13;
     - 适用范围广：既适用于传输模拟信号，又适用于传输数字信号&#13;
     - 实时性强：通路一旦建立，即可实时通信&#13;
     - 控制简单&#13;
   - 缺点：&#13;
     - 建立连接时间长&#13;
     - 线路利用率低&#13;
     - 灵活性差&#13;
     - 难以规格化&#13;
     - 难以实现差错控制&#13;
&#13;
2. 报文交换&#13;
&#13;
   - 数据交换的单位是报文，用户数据加上源地址、目的地址等信息后，封装成报文&#13;
   - 报文交换采用存储转发技术，整个报文先传送至相邻的结点，全部存储后查找转发表，转发到下一结点，重复操作，直到到达目的结点&#13;
   - 优点：&#13;
     - 无需建立连接&#13;
     - 动态分配线路&#13;
     - 线路可靠性高&#13;
     - 线路利用率高&#13;
     - 提供多目标服务&#13;
   - 缺点：&#13;
     - 转发时延高：交换结点接受完整报文后才转发给下一结点&#13;
     - 缓存开销大&#13;
     - 错误处理低效&#13;
&#13;
3. 分组交换&#13;
&#13;
   - 源结点在发送之前，先把较长的报文划分成若干个较小的等长数据段，在每个数据段前面添加一些由必要控制信息组成的首部，构成分组&#13;
   - 源结点将分组发送到分组交换网中，分组交换机接收到一个分组后，先将其缓存，然后从首部提取目的地址并查找转发表，将分组转发给下一个分组交换机……并最终到达目的结点&#13;
   - 优点：&#13;
     - 无建立时延&#13;
     - 线路利用率高&#13;
     - 简化了存储管理&#13;
     - 加速传输&#13;
     - 减少了出错概率和重发数据量&#13;
   - 缺点：&#13;
     - 存在存储转发时延&#13;
     - 需要传输额外的信息量&#13;
     - 可能出现失序、丢失或重复分组的情况&#13;
&#13;
### 计算机网络的分类&#13;
&#13;
```mermaid&#13;
graph LR&#13;
	A(计算机网络的分类)&#13;
	A--&gt;B(按分布范围分类)&#13;
	A--&gt;C(按传输技术分类)&#13;
	A--&gt;D(按拓扑结构分类)&#13;
	A--&gt;E(按使用者分类)&#13;
	A--&gt;F(按传输介质分类)&#13;
	B--&gt;G(广域网WAN)&#13;
	B--&gt;H(城域网MAN)&#13;
	B--&gt;I(居域网LAN)&#13;
	B--&gt;J(个人区域网PAN)&#13;
	C--&gt;K(广播式网络)&#13;
	C--&gt;L(点对点网络)&#13;
	D--&gt;M(总线形网络)&#13;
	D--&gt;N(星形网络)&#13;
	D--&gt;O(环形网络)&#13;
	D--&gt;P(网状网络)&#13;
	E--&gt;Q(公用网)&#13;
	E--&gt;R(专用网)&#13;
	F--&gt;S(有线网络)&#13;
	F--&gt;T(无线网络)&#13;
```&#13;
&#13;
&#13;
&#13;
### 计算机网络的性能指标&#13;
&#13;
1. 速率：指连接到网络上的结点在数字信道上传送数据的速率，也称数据传输速率/数据传输率/数据率/比特率，单位为：b/s或bit/s&#13;
2. 带宽：表示网络的通信线路所能传送数据的能力，是数字信道所能传送到的最大数据传输速率，单位是bit/s&#13;
3. 吞吐量：指单位时间内通过某个网络的实际数据量&#13;
4. 时延：指数据从网络的一端传送到另一端所需要的总时间，总时延=发送时延+传播时延+处理时延+排队时延&#13;
   - 发送时延：结点将分组的所有比特推向链路所需要的时间；发送时延=分组长度/发送速率&#13;
   - 传播时延：一个比特从链路的一段传播到另一端所需的时间；传播时延=信道长度/电磁波传播速率&#13;
   - 处理时延：数据在交换结点为存储转发而进行的一些必要处理所花的时间&#13;
   - 排队时延：分组在进入路由器后要现在输入队列中排队等待处理；路由器确定转发端口后，还要在输出队列中排队等待转发&#13;
5. 时延带宽积：指发送端发送的第一个比特即将到达终点时，发送端已发出了多少比特；时延带宽积=传播时延$\times$信道带宽&#13;
6. 往返时延RTT：指从发送端发出一个短分组，到发送端收到来自接收端的确认共经历的时延&#13;
7. 信道利用率：指某个信道有数据通过的时间占比；信道利用率=有数据通过的时间/总时间&#13;
&#13;
### 错题&#13;
&#13;
1. 计算机网络可分为通信子网和资源子网。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-wang-luo-ti-xi-jie-gou.html</guid><pubDate>Mon, 02 Sep 2024 13:47:43 +0000</pubDate></item><item><title>输入输出管理</title><link>https://wlkla.github.io/onebuaaer.github.io/post/shu-ru-shu-chu-guan-li.html</link><description># 输入输出管理&#13;
&#13;
## I/O管理概述&#13;
&#13;
### I/O设备&#13;
&#13;
1. 设备的分类&#13;
   - 按信息交换的单位分类&#13;
     - 块设备：信息交换以数据块为单位。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/shu-ru-shu-chu-guan-li.html</guid><pubDate>Mon, 02 Sep 2024 13:34:37 +0000</pubDate></item><item><title>文件管理</title><link>https://wlkla.github.io/onebuaaer.github.io/post/wen-jian-guan-li.html</link><description># 文件管理&#13;
&#13;
## 文件系统基础&#13;
&#13;
### 文件的基本概念&#13;
&#13;
1. 文件：以硬盘为载体的存储在计算机上的信息集合&#13;
&#13;
2. 在系统运行时计算机以进程为基本单位进行资源的调度与分配&#13;
&#13;
3. 在用户进行的输入输出中，以文件为基本单位&#13;
&#13;
4. 文件的组成：&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(文件)--&gt;B(存储空间中的数据)&#13;
   	A--&gt;C(分类和索引的信息)&#13;
   	A--&gt;D(访问权限的信息)&#13;
   ```&#13;
&#13;
5. 文件的结构：&#13;
&#13;
   - 数据项：是文件系统中最低级的数据组织形式，可分为两种类型&#13;
     - 基本数据项：用于描述一个对象的某种属性的一个值，是数据中的最小逻辑单位&#13;
     - 组合数据项：有多个基本数据项组成&#13;
   - 记录：是一组相关的数据项的集合，用于描述一个对象在某方面的属性&#13;
   - 文件：是指由创建者所定义的、具有文件名的一组相关元素的集合&#13;
     - 有结构文件：由若干相似的记录组成&#13;
     - 无结构文件：一个字符流&#13;
&#13;
6. 文件的属性&#13;
&#13;
   - 名称&#13;
   - 类型&#13;
   - 创建者&#13;
   - 所有者&#13;
   - 位置&#13;
   - 大小&#13;
   - 保护：对文件进行保护的访问控制信息&#13;
   - 创建时间、最后一次修改时间和最后一次存取时间&#13;
&#13;
7. 文件的分类&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(文件)--&gt;B(按性质和用途)&#13;
   	A--&gt;C(按数据的形式)&#13;
   	A--&gt;D(按存取控制属性)&#13;
   	A--&gt;E(按组织形式和处理方式)&#13;
   	B--&gt;F(系统文件)&#13;
   	B--&gt;G(用户文件)&#13;
   	B--&gt;H(库文件)&#13;
   	C--&gt;I(源码文件)&#13;
   	C--&gt;J(目标文件)&#13;
   	C--&gt;K(可执行文件)&#13;
   	D--&gt;L(可执行文件)&#13;
   	D--&gt;M(制度文件)&#13;
   	D--&gt;N(读写文件)&#13;
   	E--&gt;O(普通文件)&#13;
   	E--&gt;P(目录文件)&#13;
   	E--&gt;Q(特殊文件)&#13;
   ```&#13;
&#13;
### 文件控制块和索引节点&#13;
&#13;
1. 文件控制块FCB是用来存放控制文件需要的各种信息的数据结构，以实现按名存取&#13;
&#13;
2. 文件与FCB一一对应，FCB的有序集合称为**文件目录**，一个FCB就是一个文件目录项&#13;
&#13;
3. 一个文件目录也被视为一个文件，称为目录文件&#13;
&#13;
4. FCB主要包含以下信息&#13;
&#13;
   - 基本信息：文件名、文件的物理地址、文件的逻辑结构、文件的物理结构&#13;
   - 存取控制信息：文件主/标准用户/一般用户的存取权限等&#13;
   - 使用信息：文件建立时间，上次修改时间等&#13;
&#13;
5. 在索引目录时，只用到了文件名，文件的其他描述信息不会用到，也不需要调入内存，因此有的系统便采用了文件名和文件描述信息分离的方法，是文件描述信息单独形成一个称为索引节点的数据结构，简称**i节点**。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/wen-jian-guan-li.html</guid><pubDate>Mon, 02 Sep 2024 13:27:02 +0000</pubDate></item><item><title>内存管理</title><link>https://wlkla.github.io/onebuaaer.github.io/post/nei-cun-guan-li.html</link><description># 内存管理&#13;
&#13;
## 内存管理概念&#13;
&#13;
### 内存管理的基本原理和要求&#13;
&#13;
1. 内存管理的主要功能&#13;
&#13;
   ```mermaid&#13;
   graph TB&#13;
   	A(内存管理)--&gt;B(内存空间的分配和回收)&#13;
   	A--&gt;C(地址转换)&#13;
   	A--&gt;D(内存空间的扩充)&#13;
   	A--&gt;E(内存共享)&#13;
   	A--&gt;F(存储保护)&#13;
   ```&#13;
&#13;
2. 程序的链接与装入&#13;
&#13;
   - 创建进程首先要将程序和数据装入内存，通常有以下步骤&#13;
&#13;
     ```mermaid&#13;
     graph LR&#13;
     	A(用户源代码)--&gt;|编译|B(目标模块)--&gt;|链接|C(装入模块)--&gt;|装入|D(运行)&#13;
     ```&#13;
&#13;
     编译：由**编译程序**将用户源代码编译成若干目标模块&#13;
&#13;
     链接：由**链接程序**将编译后形成的一组目标模块，以及它们所需的库函数链接在一起，形成一个完成的装入模块&#13;
&#13;
     装入：由**装入程序**将装入模块装入内存运行&#13;
&#13;
3. 将一个装入模块装入内存有三种装入方式：&#13;
&#13;
     ```mermaid&#13;
     graph LR&#13;
     	A(装入方式)--&gt;B(绝对装入)&#13;
     	A--&gt;C(可重定位装入/静态重定位)&#13;
     	A--&gt;D(动态运行时装入/动态重定位)&#13;
     ```&#13;
&#13;
     - 绝对装入：只适用于单道程序环境。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/nei-cun-guan-li.html</guid><pubDate>Mon, 02 Sep 2024 13:25:07 +0000</pubDate></item><item><title>进程与线程</title><link>https://wlkla.github.io/onebuaaer.github.io/post/jin-cheng-yu-xian-cheng.html</link><description># 进程与线程&#13;
&#13;
## 进程与线程&#13;
&#13;
### 进程的概念和特征&#13;
&#13;
1. 为了使参与并发执行的每个程序都能独立地运行，必须为之配置一个专门的数据结构，称为进程控制块(PCB)&#13;
&#13;
2. 创建进程：创建进程的PCB；撤销进程：撤销进程的PCB&#13;
&#13;
3. 进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位&#13;
&#13;
4. 进程是动态的，程序是静态的&#13;
&#13;
5. 进程的基本特征：&#13;
&#13;
   ```mermaid&#13;
   graph LR&#13;
   	A(进程)&#13;
   	B(动态性)&#13;
   	C(并发性)&#13;
   	D(独立性)&#13;
   	E(异步性)&#13;
   	F(进程是动态地产生、变化和消亡的)&#13;
   	G(多个进程同存于内存中，能在一段时间内同时运行)&#13;
   	H(进程是一个能独立运行、独立获得资源和独立接收调度的基本单位)&#13;
   	I(由于进程的相互制约，使得进程按各自独立的、不可预知的速度向前推进)&#13;
   	A--&gt;B--&gt;F&#13;
   	A--&gt;C--&gt;G&#13;
   	A--&gt;D--&gt;H&#13;
   	A--&gt;E--&gt;I&#13;
   ```&#13;
&#13;
### 进程的组成&#13;
&#13;
1. 进程控制块&#13;
&#13;
   - PCB是进程实体的一部分，是进程存在的唯一标志&#13;
&#13;
   - PCB主要包括进程描述信息、进程控制和管理信息、资源分配清单和CPU相关信息。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/jin-cheng-yu-xian-cheng.html</guid><pubDate>Mon, 02 Sep 2024 13:09:34 +0000</pubDate></item><item><title>计算机系统概述</title><link>https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-xi-tong-gai-shu.html</link><description># 计算机系统概述&#13;
&#13;
## 操作系统的基本概念&#13;
&#13;
### 操作系统的概念&#13;
&#13;
1. 计算机系统自上而下可以大致分为四部分：&#13;
&#13;
   ```mermaid&#13;
   graph BT&#13;
   	A(硬件)&#13;
   	B(操作系统)&#13;
   	C(应用程序)&#13;
   	D(用户)&#13;
   	A&lt;--&gt;B&#13;
   	B&lt;--&gt;C&#13;
   	C&lt;--&gt;D&#13;
   ```&#13;
&#13;
   - 硬件：提供基本的计算资源&#13;
   - 应用程序：规定按何种方式使用这些资源来解决用户的计算问题&#13;
   - 操作系统：控制和协调各用户的应用程序对硬件的分配和使用&#13;
2. 操作系统：指控制和管理整个计算机系统的硬件和软件资源，合理地组织、调度计算机的工作与资源的分配，进而为用户和其他软件提供方便接口和环境的程序集合。</description><guid isPermaLink="true">https://wlkla.github.io/onebuaaer.github.io/post/ji-suan-ji-xi-tong-gai-shu.html</guid><pubDate>Mon, 02 Sep 2024 12:11:04 +0000</pubDate></item></channel></rss>